import java.io.*;
import java.util.ArrayList;
import java.util.Scanner;

// Student class to represent a student entity
class Student implements Serializable {
    private String studentId;
    private String name;
    private String email;

    public Student(String studentId, String name, String email) {
        this.studentId = studentId;
        this.name = name;
        this.email = email;
    }

    public String getStudentId() {
        return studentId;
    }

    public String getName() {
        return name;
    }

    public String getEmail() {
        return email;
    }

    @Override
    public String toString() {
        return "Student ID: " + studentId + ", Name: " + name + ", Email: " + email;
    }
}

// Course class to represent a course entity
class Course implements Serializable {
    private String courseId;
    private String courseName;
    private int capacity;

    public Course(String courseId, String courseName, int capacity) {
        this.courseId = courseId;
        this.courseName = courseName;
        this.capacity = capacity;
    }

    public String getCourseId() {
        return courseId;
    }

    public String getCourseName() {
        return courseName;
    }

    public int getCapacity() {
        return capacity;
    }

    @Override
    public String toString() {
        return "Course ID: " + courseId + ", Course Name: " + courseName + ", Capacity: " + capacity;
    }
}

// Main system class that handles course registration logic
class CourseRegistrationSystem {
    private ArrayList<Student> students = new ArrayList<>();
    private ArrayList<Course> courses = new ArrayList<>();
    private ArrayList<String> enrollments = new ArrayList<>();
    private static final String STUDENT_FILE = "students.txt";
    private static final String COURSE_FILE = "courses.txt";
    private static final String ENROLLMENT_FILE = "enrollments.txt";

    public CourseRegistrationSystem() {
        loadStudents();
        loadCourses();
        loadEnrollments();
    }

    // Adding a student
    public void addStudent(Student student) {
        students.add(student);
        saveStudents();
        System.out.println("\nStudent added successfully!");
    }

    // Adding a course
    public void addCourse(Course course) {
        courses.add(course);
        saveCourses();
        System.out.println("\nCourse added successfully!");
    }

    // Enrolling a student in a course
    public void enrollStudent(String studentId, String courseId) {
        enrollments.add(studentId + ":" + courseId);
        saveEnrollments();
        System.out.println("\nStudent enrolled successfully!");
    }

    // Showing all available courses
    public void showCourses() {
        System.out.println("\nAvailable Courses:");
        if (courses.isEmpty()) {
            System.out.println("No courses found.");
        } else {
            int index = 1;
            for (Course course : courses) {
                System.out.println(index + ". Course ID: " + course.getCourseId());
                System.out.println("   Course Name: " + course.getCourseName());
                System.out.println("   Capacity    : " + course.getCapacity());
                System.out.println("----------------------------------");
                index++;
            }
        }
    }

    // Showing all students
    public void showStudents() {
        System.out.println("\nRegistered Students:");
        if (students.isEmpty()) {
            System.out.println("No students found.");
        } else {
            int index = 1;
            for (Student student : students) {
                System.out.println(index + ". Student ID: " + student.getStudentId());
                System.out.println("   Name      : " + student.getName());
                System.out.println("   Email     : " + student.getEmail());
                System.out.println("----------------------------------");
                index++;
            }
        }
    }

    // Showing all enrollments with student names and course names
    public void showEnrollments() {
        System.out.println("\nEnrollments:");
        if (enrollments.isEmpty()) {
            System.out.println("No enrollments found.");
        } else {
            int index = 1;
            for (String enrollment : enrollments) {
                String[] parts = enrollment.split(":");
                String studentId = parts[0];
                String courseId = parts[1];

                // Fetching the student name
                String studentName = "";
                for (Student student : students) {
                    if (student.getStudentId().equals(studentId)) {
                        studentName = student.getName();
                        break;
                    }
                }

                // Fetching the course name
                String courseName = "";
                for (Course course : courses) {
                    if (course.getCourseId().equals(courseId)) {
                        courseName = course.getCourseName();
                        break;
                    }
                }

                // Output format in sequence
                System.out.println(index + ". Student: " + studentName);
                System.out.println("   ID: " + studentId);
                System.out.println("   Course: " + courseName);
                System.out.println("   Course ID: " + courseId);
                System.out.println("----------------------------------");
                index++;
            }
        }
    }

    // Loading students from file
    @SuppressWarnings("unchecked")
    private void loadStudents() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(STUDENT_FILE))) {
            students = (ArrayList<Student>) ois.readObject();
        } catch (FileNotFoundException e) {
            // No need to print anything; it's expected if no data exists
        } catch (Exception e) {
            // Removed error message
        }
    }

    // Loading courses from file
    @SuppressWarnings("unchecked")
    private void loadCourses() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(COURSE_FILE))) {
            courses = (ArrayList<Course>) ois.readObject();
        } catch (FileNotFoundException e) {
            // No need to print anything; it's expected if no data exists
        } catch (Exception e) {
            // Removed error message
        }
    }

    // Loading enrollments from file
    private void loadEnrollments() {
        try (BufferedReader br = new BufferedReader(new FileReader(ENROLLMENT_FILE))) {
            String line;
            while ((line = br.readLine()) != null) {
                enrollments.add(line);
            }
        } catch (FileNotFoundException e) {
            // No need to print anything; it's expected if no data exists
        } catch (Exception e) {
            // Removed error message
        }
    }

    // Saving students to file
    private void saveStudents() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(STUDENT_FILE))) {
            oos.writeObject(students);
        } catch (Exception e) {
            // Removed error message
        }
    }

    // Saving courses to file
    private void saveCourses() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(COURSE_FILE))) {
            oos.writeObject(courses);
        } catch (Exception e) {
            // Removed error message
        }
    }

    // Saving enrollments to file
    private void saveEnrollments() {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(ENROLLMENT_FILE))) {
            for (String enrollment : enrollments) {
                bw.write(enrollment + "\n");
            }
        } catch (Exception e) {
            // Removed error message
        }
    }
}

// Main class where user interaction happens
public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        CourseRegistrationSystem system = new CourseRegistrationSystem();

        while (true) {
            System.out.println("\nCourse Registration System");
            System.out.println("1. Add Student");
            System.out.println("2. Add Course");
            System.out.println("3. Enroll Student");
            System.out.println("4. Show Students");
            System.out.println("5. Show Courses");
            System.out.println("6. Show Enrollments");
            System.out.println("7. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    System.out.print("Enter Student ID: ");
                    String studentId = scanner.nextLine();
                    System.out.print("Enter Student Name: ");
                    String studentName = scanner.nextLine();
                    System.out.print("Enter Student Email: ");
                    String studentEmail = scanner.nextLine();
                    system.addStudent(new Student(studentId, studentName, studentEmail));
                    break;
                case 2:
                    System.out.print("Enter Course ID: ");
                    String courseId = scanner.nextLine();
                    System.out.print("Enter Course Name: ");
                    String courseName = scanner.nextLine();
                    System.out.print("Enter Course Capacity: ");
                    int capacity = scanner.nextInt();
                    system.addCourse(new Course(courseId, courseName, capacity));
                    break;
                case 3:
                    System.out.print("Enter Student ID to enroll: ");
                    String enrollStudentId = scanner.nextLine();
                    System.out.print("Enter Course ID to enroll in: ");
                    String enrollCourseId = scanner.nextLine();
                    system.enrollStudent(enrollStudentId, enrollCourseId);
                    break;
                case 4:
                    system.showStudents();
                    break;
                case 5:
                    system.showCourses();
                    break;
                case 6:
                    system.showEnrollments();
                    break;
                case 7:
                    System.out.println("Exiting the system.");
                    System.exit(0);
                default:
                    System.out.println("Invalid choice.");
            }
        }
    }
}
